// @lang=sva, @ts=4

// -------------------------------------------------
// Copyright(c) LUBIS EDA GmbH, All rights reserved
// Contact: contact@lubis-eda.com
// -------------------------------------------------

`default_nettype none

module fv_logic_unit_sequ #(
    parameter WIDTH = 16
)(
    input logic         rst,
    input logic         clk,
    // Inputs
    input [(WIDTH-1):0] req_vec,
    // Outputs
    input logic         out,
    // Valid signals
    input logic         valid,
    // Ready signals
    input logic         done
);

    // Define for every property the clock
    default clocking default_clk @(posedge clk); endclocking

    property verify_reset;
        rst |-> (out == 'b0) && (done == 'b1);
    endproperty

    property verify_computation;
        disable iff (rst)
        valid && done |-> ##WIDTH (
            (done == 'b1) && 
            (out == ((|$past(req_vec[(WIDTH-2):0], WIDTH)) & $past(req_vec[WIDTH-1], WIDTH)))
        );
    endproperty

    property done_low;
        disable iff (rst)
        valid && done |-> ##1 !done[*(WIDTH-1)];
    endproperty


    a_verify_reset: assert property (@(posedge rst) verify_reset);
    a_verify_computation: assert property (verify_computation);
    a_done_low: assert property (done_low);


endmodule

bind logic_unit_sequ fv_logic_unit_sequ #(
    .WIDTH(WIDTH)
) fv_logic_unit_seq_i (
    .rst(rst),
    .clk(clk),
    .req_vec(req_vec),
    .out(out),
    .valid(valid),
    .done(done)
);
